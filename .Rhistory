numbers <- c(1, 2, 3)
for (i in numbers){
variable <- paste("seePhase", i)
print(variable)
}
numbers <- c(1, 2, 3)
for (i in numbers){
variable <- paste("seePhase", i, sep = "")
print(variable)
}
numbers <- c(1, 2, 3)
for (i in numbers){
seePhase <- lapply
variable <- paste("seePhase", i, sep = "")
variable <- i
print(variable)
}
numbers <- c(1, 2, 3)
for (i in numbers){
seePhase <- lapply
variable <- assign(paste("seePhase", i, sep = ""))
variable <- i
print(variable)
}
numbers <- c(1, 2, 3)
for (i in numbers){
seePhase <- lapply
variable <- assign(paste("seePhase", i, sep = ""),list_name[[i]])
variable <- i
print(variable)
}
numbers <- c(1, 2, 3)
for (i in numbers){
seePhase <- lapply
variable <- assign(paste("seePhase", i, sep = ""),numbers[[i]])
print(variable)
}
numbers <- c(1, 2, 3)
for (i in numbers){
seePhase <- lapply
variable <- assign(paste("seePhase", i, sep = ""),numbers[[i]])
print(assign(paste("seePhase", i, sep = ""),numbers[[i]]))
print(variable)
}
head(seePhase)
seePhase <- read.csv("S:/R&D Docs/R&D Shared/3250 NASA NIOGS II/Data/PATCHCAL_RH/PATCHCAL_RH_160219T02/prc02_19_2016___05_57_41PM.csv")
head(seePhase)
typeof(seePhase)
lapply(seePhase, length)
lapply(seePhase, sum)
lapply(seePhase, length)
sapply(seePhase, length)
seePhase[1]
seePhase[1[1]]
seePhase[1,1]
head(seePhase)
seePhase[1], digits = 10
print((seePhase[1]))
print((seePhase[1]), digits = 1)
print((seePhase[1]), digits = 3)
print((seePhase[1]), digits = 7)
print((seePhase[1]), digits = 9)
print(head(seePhase[1]), digits = 9)
print(head(seePhase[1]), digits = 10)
print(head(seePhase[1]), digits = 11)
seePhase[1,1]
seePhase[1] - seePhase[1,1]
seePhaseTime <- seePhase[1] - seePhase[1,1]
head(seePhaseTime)
seePhaseTimeSec <- (seePhase[1] - seePhase[1,1])*24*60*60
seePhaseTimeSec
head(seePhaseTimeSec)
seePhase2 <- rbind(seePhase, seePhaseTimeSec)
seePhaseTimeSec <- (seePhase[1] - seePhase[1,1])*24*60*60
length(seePhaseTimeSec)
seePhaseTimeSec <- (seePhase[1] - seePhase[1,1])*24*60*60
head(seePhaseTimeSec)
length(seePhaseTimeSec)
typeof(seePhaseTimeSec)
typeof(seePhase)
length(seePhase)
nrow(seePhase)
nrow(seePhaseTimeSec)
seePhase2 <- rbind(seePhase, seePhaseTimeSec)
?rbind
seePhase2 <- cbind(seePhase, seePhaseTimeSec)
head(seePhase2)
seePhaseTimeSec
head(seePhaseTimeSec)
colnames(seePhase2)
colnames(seePhaseTimeSec)
names(seePhaseTimeSec)
colnames(seePhaseTimeSec) <- paste(Elapsed)
colnames(seePhaseTimeSec) <- paste("Elapsed")
colnames(seePhaseTimeSec)
seePhaseTimeSec <- (seePhase[1] - seePhase[1,1])*24*60*60
seePhaseTimeSec <- (seePhase[1] - seePhase[1,1])*24*60*60
colnames(seePhaseTimeSec) <- paste("Elapsed")
seePhase2 <- cbind(seePhase, seePhaseTimeSec)
seePhase2
head(seePhase2)
# read in the SeePhase data (as a list) (PMD)
source(".First.R")
pathPrep()
seePhase <- read.csv("S:/R&D Docs/R&D Shared/3250 NASA NIOGS II/Data/PATCHCAL_RH/PATCHCAL_RH_160219T02/prc02_19_2016___05_57_41PM.csv")
plotId <- paste("plot name")
plot <- ggplot(seePhase, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
newdata <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(newdata)
# Use this code to convert to elapsed time
seePhaseTimeSec <- (newdata[1] - newdata[1,1])*24*60*60
colnames(seePhaseTimeSec) <- paste("ElapsedSec")
seePhase2 <- cbind(newdata, seePhaseTimeSec)
plotId <- paste("plot name")
plot <- ggplot(newdata, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
# read in the SeePhase data (as a list) (PMD)
source(".First.R")
library(ggplot2)
pathPrep()
seePhase <- read.csv("S:/R&D Docs/R&D Shared/3250 NASA NIOGS II/Data/PATCHCAL_RH/PATCHCAL_RH_160219T02/prc02_19_2016___05_57_41PM.csv")
plotId <- paste("plot name")
plot <- ggplot(seePhase, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
newdata <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(newdata)
# Use this code to convert to elapsed time
seePhaseTimeSec <- (newdata[1] - newdata[1,1])*24*60*60
colnames(seePhaseTimeSec) <- paste("ElapsedSec")
seePhase2 <- cbind(newdata, seePhaseTimeSec)
plotId <- paste("plot name")
plot <- ggplot(newdata, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("plot name")
plot <- ggplot(seePhase2, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("plot name")
plot <- ggplot(seePhase2, aes_string("ElapsedSec", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
# read in the SeePhase data (as a list) (PMD)
source(".First.R")
library(ggplot2)
pathPrep()
seePhase <- read.csv("S:/R&D Docs/R&D Shared/3250 NASA NIOGS II/Data/PATCHCAL_RH/PATCHCAL_RH_160219T02/prc02_19_2016___05_57_41PM.csv")
plotId <- paste("plot name")
plot <- ggplot(seePhase, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
newdata <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(newdata)
# Use this code to convert to elapsed time, in minutes
seePhaseTimeSec <- (newdata[1] - newdata[1,1])*24*60
colnames(seePhaseTimeSec) <- paste("ElapsedMin")
seePhase2 <- cbind(newdata, seePhaseTimeSec)
plotId <- paste("plot name")
plot <- ggplot(seePhase2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
# read in the SeePhase data (as a list) (PMD)
source(".First.R")
library(ggplot2)
pathPrep()
seePhase <- read.csv("S:/R&D Docs/R&D Shared/3250 NASA NIOGS II/Data/PATCHCAL_RH/PATCHCAL_RH_160219T02/prc02_19_2016___05_57_41PM.csv")
plotId <- paste("plot name")
plot <- ggplot(seePhase, aes_string("X", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
newdata <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(newdata)
# Use this code to convert to elapsed time, in minutes
seePhaseTimeSec <- (newdata[1] - newdata[1,1])*24*60
colnames(seePhaseTimeSec) <- paste("ElapsedMin")
seePhase2 <- cbind(newdata, seePhaseTimeSec)
plotId <- paste("plot name")
plot <- ggplot(seePhase2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
T1.data <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(T1.data)
T2.data <- subset(seePhase, Analog >= 7 & Analog <= 10)
head(T2.data)
# Use this code to convert to elapsed time, in minutes
TimeSec <- (T1.data[1] - T1.data[1,1])*24*60
colnames(TimeSec) <- paste("ElapsedMin")
T1.data2 <- cbind(T1.data, TimeMin)
TimeSec <- (T2.data[1] - T2.data[1,1])*24*60
colnames(TimeSec) <- paste("ElapsedMin")
T2.data2 <- cbind(T2.data, TimeMin)
head(T1.data1)
head(T1.data2)
T1.data <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(T1.data)
T2.data <- subset(seePhase, Analog >= 7 & Analog <= 10)
head(T2.data)
# Use this code to convert to elapsed time, in minutes
TimeSec <- (T1.data[1] - T1.data[1,1])*24*60
colnames(TimeSec) <- paste("ElapsedMin")
T1.data2 <- cbind(T1.data, TimeMin)
TimeSec <- (T2.data[1] - T2.data[1,1])*24*60
colnames(TimeSec) <- paste("ElapsedMin")
T2.data2 <- cbind(T2.data, TimeMin)
head(T1.data2)
head(T2.data2)
T1.data <- subset(seePhase, Analog >= 2 & Analog <= 6)
head(T1.data)
T2.data <- subset(seePhase, Analog >= 7 & Analog <= 10)
head(T2.data)
# Use this code to convert to elapsed time, in minutes
TimeMin <- (T1.data[1] - T1.data[1,1])*24*60
colnames(TimeMin) <- paste("ElapsedMin")
T1.data2 <- cbind(T1.data, TimeMin)
TimeMin <- (T2.data[1] - T2.data[1,1])*24*60
colnames(TimeMin) <- paste("ElapsedMin")
T2.data2 <- cbind(T2.data, TimeMin)
head(T1.data2)
head(T2.data2)
plotId <- paste("plot name")
plot <- ggplot(seePhase2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("plot name")
plot <- ggplot(T1.data2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("ss name")
plot <- ggplot(T1.data2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("T1 name")
plot <- ggplot(T1.data2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("T2 name")
plot <- ggplot(T2.data2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
ggtitle(plotId)
print(plot)
plotId <- paste("T1 name")
plot <- ggplot(T1.data2, aes_string("ElapsedMin", "Ph1")) +
geom_line() +
geom_line(T2.data2, aes_string("ElapsedMin", "Ph1")
ggtitle(plotId)
print(plot)
plotId <- paste("T1 name")
plot <- ggplot(NULL, aes_string("ElapsedMin", "Ph1")) +
geom_line(data = T1.data2) +
geom_line(data = T2.data2)
ggtitle(plotId)
print(plot)
plotId <- paste("T1 name")
plot <- ggplot(NULL, aes_string("ElapsedMin", "Ph1")) +
geom_line(data = T1.data2) +
geom_line(data = T2.data2, colour = "red")
ggtitle(plotId)
print(plot)
colours <- c("red", "blue", "green")
plotId <- paste("T1 name")
plot <- ggplot(NULL, aes_string("ElapsedMin", "Ph1")) +
geom_line(data = T1.data2, colour = colours[1]) +
geom_line(data = T2.data2, colour = colours[2])
ggtitle(plotId)
print(plot)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
setwd("~/GitHub/SeePhase-M")
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(CCCC3333 ~ AAAA1111 + BBBB2222, data = tf4, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
print(table.check.probes) #allows user to verify that the correct data is being used
?dcast
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(tf4, CCCC3333 ~ AAAA1111 + BBBB2222, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(tf4, CCCC3333 ~ AAAA1111, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
head(tf4)
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(tf4, Ph2 ~ vaisalaRH, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(tf4, Ph2 ~ vaisalaRH + vaisalaTemp, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
x_text = "table.check.probes <- dcast(tf4, vaisalaRH ~ vaisalaTemp, value.var = Ph2, length)"
print(table.check.probes) #allows user to verify that the correct data is being used
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(tf4, vaisalaRH ~ Ph2, value.var = vaisalaTemp, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
print(table.check.probes) #allows user to verify that the correct data is being used
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- aggregate(CCCC3333 ~ AAAA1111 + BBBB2222, data = tf4, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
print(table.check.probes) #allows user to verify that the correct data is being used
x_text = "table.check.probes <- dcast(tf4, vaisalaRH ~ Ph2, value.var = vaisalaTemp, length)"
eval(parse(text=x_text))
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes <- dcast(tf4, vaisalaRH ~ Ph2, value.var = vaisalaTemp, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
print(table.check.probes) #allows user to verify that the correct data is being used
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes2 <- dcast(tf4, vaisalaRH ~ Ph2, value.var = vaisalaTemp, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
print(table.check.probes2) #allows user to verify that the correct data is being used
x_text = "table.check.probes2 <- dcast(tf4, vaisalaRH ~ Ph2, value.var = vaisalaTemp, length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
head(tf4)
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes2 <- dcast(tf4, vaisalaRH ~ Ph2, value.var = "vaisalaTemp", length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
print(table.check.probes2) #allows user to verify that the correct data is being used
#This is for real temperature (Analog) and RH (Vaisala) data
x_text = "table.check.probes2 <- dcast(tf4, vaisalaRH ~ Ph2, value.var = "vaisalaTemp", length)"
x_text = sub("AAAA1111",name.vaisala.RH,x_text) #CHANGED NAME.VDS.RH TO O2 HERE ###NEED TO SOFT CODE THIS
x_text = sub("BBBB2222",name.seePhase.temperature,x_text)
x_text = sub("CCCC3333",name.seePhase.phase,x_text)
eval(parse(text=x_text))
table.check.probes2 <- dcast(tf4, vaisalaRH ~ Ph2, value.var = "vaisalaTemp", length)
print(table.check.probes2) #allows user to verify that the correct data is being used
table.check.probes2 <- dcast(tf4, Ph2 ~ vaisalaRH, value.var = "vaisalaTemp", length)
print(table.check.probes2) #allows user to verify that the correct data is being used
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
pring(q)
print("hel")
print(/n"hel")
print(\n"hel")
print("/nhel")
print("/n, hel")
print("\n, hel")
print(/n "hel")
print(\n "hel")
cat("File not supplied.\nUsage: ./program F=filename\n")
cat(\n)
cat("\n")
cat("\n\n")
cat("\n\n\n")
?cat
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
traceback()
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
paste0("offset_value_main = ",offset_value_main," #used for this set of run")
paste0("\noffset_value_main = ",offset_value_main," #used for this set of run")
print("dog")
cat("dog")
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
write(paste0paste0("offset_value_main = ",offset_value_main," #used for this set of run")("process.type = ",process.type," #used for this set of run"),file=paste0(tPath, settings.file),append=TRUE)
write(paste0("offset_value_main = ",offset_value_main," #used for this set of run")("process.type = ",process.type," #used for this set of run"),file=paste0(tPath, settings.file),append=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
source('~/GitHub/SeePhase-M/mainFunction 2016-04-01.R', echo=TRUE)
